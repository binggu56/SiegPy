# -*- coding: utf-8 -*
import numpy as np
import sympy
from sympy.abc import x
from siegpy import (SWPotential, ErfKGCoordMap, FD2_filters, Hamiltonian,
                    SymbolicPotential, UniformCoordMap)

l = np.sqrt(2)*np.pi
V0 = 10
xm = 6.5
xgrid = np.linspace(-xm, xm, 31)
pot = SWPotential(l, V0, grid=xgrid)
tta0 = 0.6
x00 = 5.5
lbda0 = 5.5
cm = ErfKGCoordMap(tta0, x00, lbda0)


class TestHamiltonian():

    def test_init(self):
        ham = Hamiltonian(pot, cm, filters=FD2_filters)
        assert ham.filters == FD2_filters

    def test_solve_1(self):
        ham = Hamiltonian(pot, cm)
        basis = ham.solve()
        expected_energies = np.array([
            (-9.8258555090962574-2.6546590798866949e-10j),
            (-9.3035905580724059-7.6598935290063171e-10j),
            (-8.4337327185023696-6.6466640682708021e-10j),
            (-7.2170803908907954+4.1843487537932748e-10j),
            (-5.6531331935777089-7.2805607643774824e-09j),
            (-3.7331727313402907-2.2731924485347856e-07j),
            (0.48199461232218782-0.029695325290483819j),
            (0.64511468867519617-0.052607493319354812j),
            (-1.4454471445938635-2.3124914897804456e-05j),
            (1.3393969980835945-0.056743491630561374j),
            (2.4275763044084218-0.15570804417453171j),
            (2.8683426878571336-0.17291265811620288j),
            (4.6308794866301355-0.18099739393933512j),
            (1.2674698086723535-3.4356699332214302j),
            (5.717126893749314-0.34868512133703267j),
            (0.98519302674745435-2.8281995368006108j),
            (6.6786056193011296-0.31333346823886887j),
            (9.1195081376181832-0.35063413683914268j),
            (5.6141333467759216-13.676961896743899j),
            (5.7574517713613771-14.07096884258395j),
            (10.621220201014685-0.61715812916457458j),
            (11.819257555031127-0.49288733192821294j),
            (14.31813761312905-0.20115357918345877j),
            (17.191235569258001-0.77451408209059991j),
            (17.344423089815294-0.70283033577484211j),
            (23.21361885065296-0.3712884133055579j),
            (23.222993131745309-0.36862821360469394j),
            (1.0950489894736448-0.41661819045718268j),
            (1.0618012129585799-0.42035108495353246j),
            (0.96453613037655295-40.620043780657333j),
            (0.9631159882324738-40.619136705473657j)
        ])
        np.testing.assert_array_almost_equal(np.array(basis.energies),
                                             expected_energies)
        expected_virials = np.abs([
            (0.00025505517489106177-3.5177707765979616e-10j),
            (0.0011013545876087023-9.8989486514550421e-10j),
            (0.0028475068523797576-8.885559182848257e-10j),
            (0.0064277961769325211+5.5542753353217461e-10j),
            (0.015646771645628537+3.2157767915771983e-09j),
            (0.04618542575755176+7.6710933613382349e-08j),
            (0.082664591961613659+0.025906838238249658j),
            (0.081917815809552513+0.050961938775272289j),
            (0.13664828156983169+8.5177934989056001e-06j),
            (0.35766361249473+0.10842691927326553j),
            (0.18021081531617156+0.32996129285452247j),
            (0.29389312226700876+0.35206983415950605j),
            (0.55770704514762171+0.29942741927069161j),
            (-0.49769146019890742-0.59291979203468215j),
            (0.5398710043997309+0.67027913278151341j),
            (-0.38342998133916417-0.7722166801249678j),
            (1.014433211800678+0.63229259521220937j),
            (1.407756927943792+0.59172962033447751j),
            (1.3100616959377147+0.86171751894056259j),
            (1.4206092152436001+0.89332502797643432j),
            (1.6463697350693534+1.283923064687204j),
            (2.6257225174235135+1.0951439371464404j),
            (3.7571929094700249+0.27967865976315842j),
            (3.5414164522923457+1.6872901674266505j),
            (3.8584867792040547+1.6341639969156634j),
            (4.5444766585570431+0.77789198459099584j),
            (4.5580968940953364+0.77535399945173034j),
            (-8.6040103775529069-4.1105547409259522j),
            (-8.0938158588700073-5.1676095326280356j),
            (-37.168779466364334-19.179531990897967j),
            (-37.171121354867687-19.183416087105243j)])
        np.testing.assert_array_almost_equal(np.array(basis.virials),
                                             expected_virials)
        # Test that a symbolic SWPotential gives the same results
        sym_func = sympy.Piecewise(
            (0, x < -l/2), (-V0, x <= l/2), (0, x > l/2)
        )
        sym_pot = SymbolicPotential(sym_func, grid=xgrid)
        ham = Hamiltonian(sym_pot, cm)
        sym_basis = ham.solve()
        np.testing.assert_array_almost_equal(np.array(sym_basis.energies),
                                             expected_energies)
        np.testing.assert_array_almost_equal(np.array(sym_basis.virials),
                                             expected_virials)

    def test_solve_2(self):
        # Test without GCVT
        cm0 = ErfKGCoordMap(tta0, x00, lbda0, GCVT=False)
        ham = Hamiltonian(pot, cm0, filters=FD2_filters)
        ham.solve()

    def test_solve_continuum(self):
        cm0 = UniformCoordMap(0)
        xgrid0 = np.linspace(-xm, xm, 21)
        pot0 = SWPotential(l, V0, grid=xgrid0)
        ham = Hamiltonian(pot0, cm0, filters=FD2_filters)
        basis = ham.solve()
        expected_energies = np.array([
            (-9.8288286161968976+0j), (0.18617777752368994+0j),
            (0.18617792287242849+0j), (-9.3383898863702761+0j),
            (0.71296945196866168+0j), (0.7129697782275819+0j),
            (-8.595473591590606+0j), (1.4930119121801471+0j),
            (1.4930122268258661+0j), (-7.7035348937163128+0j),
            (2.4021424682202617+0j), (2.4021426699256252+0j),
            (-6.7916276637316777+0j), (3.3011897225301228+0j),
            (3.3011898226690479+0j), (-5.9996161956567011+0j),
            (4.0565460098448725+0j), (4.0565460483764415+0j),
            (-5.4587483341975407+0j), (4.5581426867299424+0j),
            (4.5581426953995949+0j)
        ])
        np.testing.assert_array_almost_equal(np.array(basis.energies),
                                             expected_energies)
        expected_virials = np.array([
            (0.068957671136551296+0j), (0.081706100499458409+0j),
            (0.081706716674626631+0j), (0.26737626672232179+0j),
            (0.31078504439895654+0j), (0.31078634874138406+0j),
            (0.57066555202735969+0j), (0.64535082474379568+0j),
            (0.64535198905296198+0j), (0.9401929123726398+0j),
            (1.0300394704547271+0j), (1.0300401604090617+0j),
            (1.3261035947786457+0j), (1.4063693516031113+0j),
            (1.4063696715986373+0j), (1.6704586014440586+0j),
            (1.7201610923651163+0j), (1.7201612093549419+0j),
            (1.9122967253198124+0j), (1.9275603353958155+0j),
            (1.9275603609060181+0j)
        ])
        np.testing.assert_array_almost_equal(np.array(basis.virials),
                                             expected_virials)

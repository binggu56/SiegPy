# -*- coding: utf-8 -*-
"""
Tests for the basisset.py file.
"""

import pytest
import numpy as np
from siegpy import (SWPotential, Rectangular, BasisSet, Eigenstate,
                    UniformCoordMap, ErfKGCoordMap, Hamiltonian)

# Numerical continuum BasisSet generated by:
xgrid1 = np.linspace(-6.5, 6.5, 31)
l = np.sqrt(2) * np.pi
V0 = 10
pot1 = SWPotential(l, V0, grid=xgrid1)
cm = UniformCoordMap(0)
basis = Hamiltonian(pot1, cm).solve()
r_num = Rectangular.from_center_and_width(0.25, 2.0, grid=xgrid1)
# Numerical Siegert BasisSet generated by:
cm_sieg = ErfKGCoordMap(0.4, 5.5, 5.5)
basis_sieg = Hamiltonian(pot1, cm_sieg).solve(max_virial=0.15)


class TestBasisSet():

    def test_init_from_one_state(self):
        BasisSet(states=basis[0])

    def test_init_raises_ValueError(self):
        with pytest.raises(ValueError):
            BasisSet(states=1)

    def test_potential(self):
        assert basis.potential == pot1

    def test_add(self):
        # Test the addition of states to a basis set
        eig1 = Eigenstate([-1, 0, 1], [1, 2, 3], 3)
        eig2 = Eigenstate([-1, 0, 1], [3, 2, 1], 1)
        b0 = BasisSet()
        b0 += BasisSet(states=[eig1, eig2])
        assert b0[0] == eig1 and b0[1] == eig2

    def test_add_raises_TypeError(self):
        # Do not remove the next line!
        new_basis = BasisSet()
        with pytest.raises(TypeError):
            new_basis += [pot1]
        with pytest.raises(TypeError):
            new_basis += pot1

    def test_completeness_convergence(self):
        kg, _ = basis.completeness_convergence(r_num)
        assert len(kg) == 25
        kg, _ = basis.completeness_convergence(r_num, klim=(0, 5))
        assert len(kg) == 17

    def test_Berggren_completeness_convergence(self):
        kg, _ = basis_sieg.Berggren_completeness_convergence(r_num)
        assert len(kg) == 3

    def test_completeness_convergence_raises_ValueError(self):
        klims = [(-1, 1), (1, -1), (-1, 2), (-1, -2)]
        for klim in klims:
            with pytest.raises(ValueError):
                basis.completeness_convergence(r_num, klim=klim)

    @pytest.mark.parametrize("basisset, expected", [
        (basis, np.array([0, 0, 0])),
        (basis_sieg, np.array([0., 0.031187, 0.00031]))
    ])
    def test_MLE_strength_function(self, basisset, expected):
        calc = basisset.MLE_strength_function(r_num, kgrid=[0, 1, 2])
        np.testing.assert_array_almost_equal(calc, expected)

    def test_Berggren_propagation(self):
        time_grid = [0., 1.]
        expected = basis.bounds._propagate(r_num, time_grid)
        calc = basis.Berggren_propagation(r_num, time_grid)
        np.testing.assert_array_almost_equal(calc, expected)

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Symbolic Woods-Saxon potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Square-Well Potential (SWP) used in all the previous notebooks can actually be considered as a Woods-Saxon Potential (WSP) with an infinitely large sharpness parameter. \n",
    "\n",
    "In this notebooks, we will therefore obtain the resonant states of multiple WS potentials of varying sharpness parameters and compare the obtained spectra with the one obtained with the SW potential that corresponds to the infinite sharpness parameter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some more lines are required for matplotlib because a plotting function will be defined in the end of the notebook. The class describing the Woods-Saxon potential is also imported from SiegPy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.colors\n",
    "from matplotlib import cm\n",
    "from siegpy import (SWPotential, Hamiltonian, BasisSet,\n",
    "                    ErfKGCoordMap, WoodsSaxonPotential)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Smooth potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first Woods-Saxon potential has the smallest sharpness parameter considered in this notebook, and is discretized over a grid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a grid\n",
    "xmax = 9.0\n",
    "xgrid = np.linspace(-xmax, xmax, 1201)\n",
    "# Define the parameters of the first Woods-Saxon potenti\n",
    "V0 = 10\n",
    "l = np.sqrt(2)*np.pi\n",
    "lbda1 = 4\n",
    "# Definition of the first Woods-Saxon potential\n",
    "sym_pot_ws1 = WoodsSaxonPotential(l, V0, lbda1, grid=xgrid)\n",
    "sym_pot_ws1.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This potential is then used to define a Hamiltonian that is finally solved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition of the Hamiltonian to find the resonant states of this potential\n",
    "cm_ws = ErfKGCoordMap(np.pi/4, xmax-1.5, 1.0)\n",
    "ham_ws1 = Hamiltonian(sym_pot_ws1, cm_ws)\n",
    "basis_ws1 = ham_ws1.solve(max_virial=10**(-3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us finally look at some plots:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition of all the parameters to get consistent plots for \n",
    "# all the potentials considered throughout this notebook\n",
    "re_e_max = 21\n",
    "im_e_min = -13\n",
    "im_k_max = np.sqrt(2*V0)\n",
    "re_k_max = np.sqrt(2*re_e_max)\n",
    "re_e_lim = (-V0, re_e_max)\n",
    "im_e_lim = (im_e_min, -im_e_min/30)\n",
    "re_k_lim = (-re_k_max/30, re_k_max)\n",
    "im_k_lim = (-im_k_max, im_k_max)\n",
    "# Plot the energies, wavenumbers and some eigenstates of the potential\n",
    "basis_ws1.plot_energies(xlim=re_e_lim, ylim=im_e_lim)\n",
    "basis_ws1.plot_wavenumbers(xlim=re_k_lim, ylim=im_k_lim)\n",
    "basis_ws1.plot_wavefunctions(nstates=7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bound states are found, and they seem rather similar to the ones found for the Square-Well potential, with low virial values. On the other hand, the resonant states are more difficult to find because the values of the imaginary part of their energy is high (in absolute value), so that it requires a large complex scaling angles. It is therefore not surprising they have rather high virial values, not so far away from those of the rotated continuum states."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sharper potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now consider the case of a sharper potential:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A larger sharpness parameter gives a sharper potential.\n",
    "# All the other parameters are the same as in the previous case.\n",
    "lbda2 = 10\n",
    "sym_pot_ws2 = WoodsSaxonPotential(l, V0, lbda2, grid=xgrid)\n",
    "sym_pot_ws2.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The new potential is used to define another Hamiltonian, that is finally solved:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ham_ws2 = Hamiltonian(sym_pot_ws2, cm_ws)\n",
    "basis_ws2 = ham_ws2.solve(max_virial=10**(-6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us look at some plots:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "basis_ws2.plot_energies(xlim=re_e_lim, ylim=im_e_lim)\n",
    "basis_ws2.plot_wavenumbers(xlim=re_k_lim, ylim=im_k_lim)\n",
    "basis_ws2.plot_wavefunctions(nres=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This time, the resonant states are more easily found from the rest of the eigenstates: their imaginary value is closer to the axis $\\text{Im}[E] = 0$, and it would therefore require a lower complex scaling angle than in the previous case. Note that the virial values are also smaller for the resonant states, compared to the previous case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sharp potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last Woods-Saxon that will be considered will be even sharper:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The sharpness parameter is increased again\n",
    "lbda3 = 50\n",
    "sym_pot_ws3 = WoodsSaxonPotential(l, V0, lbda3, grid=xgrid)\n",
    "sym_pot_ws3.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A new Hamiltonian is created, and it is solved again, allowing the production of more plots:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ham_ws3 = Hamiltonian(sym_pot_ws3, cm_ws)\n",
    "basis_ws3 = ham_ws3.solve(max_virial=10**(-6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "basis_ws3.plot_energies(xlim=re_e_lim, ylim=im_e_lim)\n",
    "basis_ws3.plot_wavenumbers(xlim=re_k_lim, ylim=im_k_lim)\n",
    "basis_ws3.plot_wavefunctions(nres=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, it can be seen that the resonant states of this sharp potential have lower imaginary part of energy (in absolute value) than for the previous two potentials. They also have lower virial values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Square-Well Potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now study the case of the Square-Well potential that is the limiting case of the Woods-Saxon potentials presented above, in the limit where the sharpness parameter is infinitely large:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The same width, depth and grid is used\n",
    "sw_pot = SWPotential(l, V0, grid=xgrid)\n",
    "ham_sw = Hamiltonian(sw_pot, cm_ws)\n",
    "basis_sw = ham_sw.solve(max_virial=10**(-6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "basis_sw.plot_energies(xlim=re_e_lim, ylim=im_e_lim)\n",
    "basis_sw.plot_wavenumbers(xlim=re_k_lim, ylim=im_k_lim)\n",
    "basis_sw.plot_wavefunctions(nres=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is not different from all the plots obtained in the previous notebooks. The states that are obtained seem close to those of the sharper Woods-Saxon Potential considered, which is not that surprising. One detail still has to draw the attention: the virial values are much higher in this case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison of all the results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Siegert states and virial values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to plot only the bound and resonant states of all the basis sets while using only one scale for the virial, a new function has to be defined:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter_plot(data_kwd, basissets, xlim=None, ylim=None, title=None,\n",
    "                 file_save=None, show_unknown=False):\n",
    "    # Object-oriented plots\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    # Add the real and imaginary axes\n",
    "    ax.axhline(0, color='black', lw=1)  # black line y=0\n",
    "    ax.axvline(0, color='black', lw=1)  # black line x=0\n",
    "    # Define the min and max values of the virial, in order to\n",
    "    # use the same normalized scale of for the virial values.\n",
    "    allstates = BasisSet()\n",
    "    for b in basissets:\n",
    "        allstates += b\n",
    "    vmin = np.min(np.log10(allstates.virials))\n",
    "    vmax = np.max(np.log10(allstates.virials))\n",
    "    norm = matplotlib.colors.Normalize(vmin=vmin, vmax=vmax)\n",
    "    # Define the markers used for each basis set (not more than four\n",
    "    # basis sets can be considered ; you can still add more markers here,\n",
    "    # but the plot might become difficult to read)\n",
    "    markers = [\"o\", \"s\", \"d\", \"^\"]\n",
    "    # Loop over the basis sets to plot them\n",
    "    for i, b in enumerate(basissets):\n",
    "        # Select which states have to be plotted and store their virial\n",
    "        to_plot = b.bounds + b.resonants + b.continuum\n",
    "        if show_unknown is True or len(b.unknown) == len(b):\n",
    "            to_plot += b.unknown\n",
    "        virials = np.log10(to_plot.virials[::-1])\n",
    "        # Set the x-axis label and get the data to be plotted, according\n",
    "        # to the value of data_kwd.\n",
    "        if data_kwd == 'wavenumbers':\n",
    "            data_label = 'k'\n",
    "            plot_data = to_plot.wavenumbers[::-1]\n",
    "        elif data_kwd == 'energies':\n",
    "            data_label = 'E'\n",
    "            plot_data = to_plot.energies[::-1]\n",
    "        # Else: raise a value error\n",
    "        else:\n",
    "            raise ValueError(\"data_kwd must be equal to 'wavenumbers' \"\n",
    "                             \"or 'energies' (here '{}')\".format(data_kwd))\n",
    "        # Plot all the data\n",
    "        if plot_data != []:\n",
    "            # normalized scale for the colors\n",
    "            c = plt.cm.CMRmap(norm(virials))\n",
    "            ax.scatter(np.real(plot_data), np.imag(plot_data), c=c,\n",
    "                       marker=markers[i], s=30, label=\"$V_{}$\".format(i+1))\n",
    "    # Set the colorbar and its title\n",
    "    m = cm.ScalarMappable(cmap=plt.cm.CMRmap, norm=norm)\n",
    "    m.set_array([])\n",
    "    plt.colorbar(m, label=\"$log_{10}$(|virial|)\")\n",
    "    # Set axis labels and range and the plot title\n",
    "    ax.set_xlabel(\"Re[${}$]\".format(data_label))\n",
    "    ax.set_ylabel(\"Im[${}$]\".format(data_label))\n",
    "    if xlim is not None:\n",
    "        ax.set_xlim(xlim)\n",
    "    ax.set_xticklabels(ax.get_xticks())\n",
    "    if ylim is not None:\n",
    "        ax.set_ylim(ylim)\n",
    "    ax.set_yticklabels(ax.get_yticks())\n",
    "    if title is not None:\n",
    "        ax.set_title(title)\n",
    "    plt.legend()\n",
    "    # Save the plot and show it\n",
    "    if file_save is not None:\n",
    "        fig.savefig(file_save)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This new function is finally used to plot the most interesting states:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_kwd = 'energies'\n",
    "# Uncomment the next line to plot the wavenumbers\n",
    "# data_kwd = 'wavenumbers'\n",
    "if data_kwd == 'energies':\n",
    "    re_lim = re_e_lim\n",
    "    im_lim = im_e_lim\n",
    "elif data_kwd == 'wavenumbers':\n",
    "    re_lim = re_k_lim\n",
    "    im_lim = im_k_lim\n",
    "basissets = [basis_ws1, basis_ws2, basis_ws3, basis_sw]\n",
    "scatter_plot(data_kwd, basissets, show_unknown=False,\n",
    "             xlim=re_lim, ylim=im_lim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$V_1$ (resp. $V_2$ and $V_3$) corresponds to the first (resp. second and third) Woods-Saxon potential, while $V_4$ corresponds to the SW potential. The trend for the resonant states is clearly visible, along with the fact that the virial values of the SWP are smaller than for the sharper Woods-Saxon potential, while their energy almost coincides. Note that it is clear that the resonant states of the smoothest potential are more difficult to separate from the rest of the rotated continuum states.\n",
    "\n",
    "From there, it is clear that the smoother the Woods-Saxon potential, the higher the absolute value of the imaginary part of the resonant states energies: this means that it will be more difficult to identify the resonant states for smooth potentials, and that the resonant states of smooth potentials would also have very short lifetime (that is proportional to the absolute value of the imaginary part of the resonant state energy)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Focus on the bound states"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us focus on the bound states energies found for all the potentials studied above. It will also be interesting to compare with the analytical results for the 1D Square-Well potential:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the analytical Siegert states of the SWP (here, read from a file)\n",
    "exact_siegerts = BasisSet.from_file(\"siegerts.dat\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energies of the bound states for each basis set (*i.e.*, for each potential) are represented in the following plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the bound states\n",
    "basissets = [basis_ws1, basis_ws2, basis_ws3, basis_sw, exact_siegerts]\n",
    "for i, basis in enumerate(basissets):\n",
    "    bounds = BasisSet(states=basis.bounds[:7])    \n",
    "    plt.scatter([i+1]*len(bounds), np.real(bounds.energies), marker=\"_\", s=2500)\n",
    "plt.xlim(0.5, len(basissets)+0.5)\n",
    "plt.xlabel(\"Potential $V_i$\")\n",
    "plt.ylabel(\"Re[Energy]\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this plot, $V_5$ corresponds to the analytical SWP case. It is worth noting that the smoother potential has a more compact spectrum of bound states: the low energy bound states tend to be higher than those of the sharper potentials (because the potential width is smaller in this energy range), while the very high energy bound states tend to be more bound (because the potential has a larger width for such an energy range). We also see that the results converge to the analytical SW potential ones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another way to look at the energy of the bound states found for each potential is print them in a table. This is done below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Maximal number of states\n",
    "i_max = 7\n",
    "# Print the header of the table\n",
    "header = \" phi  |\"\n",
    "for i in range(len(basissets)):\n",
    "    header += \"|       V{}      \".format(i+1)\n",
    "print(header)\n",
    "print(\"-\"*len(header))\n",
    "# Print the table\n",
    "energies = np.array([[en for en in np.sort((basis.siegerts).energies[:i_max])] \n",
    "                     for basis in basissets])\n",
    "for i in range(i_max):\n",
    "    line = \"phi_{} |\".format(i+1)\n",
    "    for en in energies.T[i]:\n",
    "        line += \"| {: .3f} \".format(en)\n",
    "    print(line)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusions\n",
    "\n",
    "We presented the use of the Woods-Saxon potential in `SiegPy` and compared the Siegert states obtained when varying the sharpness of the potential, with the Square-Well potential case as a limit of an infinite sharpness parameter.\n",
    "\n",
    "Obtaining the numerical resonant states of the smoother potential proves to be more difficult because their energies have imaginary parts that get higher (in absolute value). This means that large complex scaling angles have to be used, while the virial values obtained are very small compared to sharper potentials. However, if the potential is too sharp, the virial values are higher. It was also possible to see how the numerical bound states obtained converge to the ones of the SW potential when the sharpness parameter is increased."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

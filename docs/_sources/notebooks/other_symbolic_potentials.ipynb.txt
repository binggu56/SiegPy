{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining a new symbolic potential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, we'll focus on the possibility of easily studying other symbolic potentials rather than on the physical information gained from the presented results. This is made possible thanks to the `SymbolicPotential` class, which is actually the base class for the `WoodsSaxonPotential`, `TwoGaussianPotential` and `FourGaussianPotential` classes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `SymbolicPotential` class is imported from `SiegPy`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from siegpy import SymbolicPotential, Hamiltonian, UniformCoordMap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A simple example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This potential is of the form $-\\frac{a}{x^2+b}$. The simplest way of initializing a symbolic potential is by defining a string where `\"x\"` is the only variable (all the parameters must be evaluated in the string). Another possibility is by directly using the sympy module to define a symbolic function (where `x` is the only allowed variable, or symbol)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a grid\n",
    "xmax = 9.0\n",
    "xgrid = np.linspace(-xmax, xmax, 1001)\n",
    "# Define the symbolic function as a string\n",
    "a = 1\n",
    "b = 0.1\n",
    "sym_func = \"-{} / (x**2 + {})\".format(a, b)\n",
    "# Initialize the ymbolic potential and plot it\n",
    "pot = SymbolicPotential(sym_func, grid=xgrid)\n",
    "pot.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From there, the usual way of finding the eigenstates and plotting the results can be achieved:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm = UniformCoordMap(0)\n",
    "ham = Hamiltonian(pot, cm)\n",
    "basis = ham.solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "basis.plot_energies(xlim=(-10, 5), ylim=(-5, 1))\n",
    "basis.plot_wavenumbers(xlim=(-1, 10), ylim=(-15, 1))\n",
    "basis.plot_wavefunctions(nstates=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note how this potential has a bound state close to the 0 energy: this state might require a more extended grid to be considered as converged."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
